%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                                                        %%   Read binary file writtten in Yi-Qiao Song's format.                                  %%   The first 20 lines contain the header information. Most of this is disregarded       %%   except for the echo spacing, the number of recovery times and the number of          %%   echoes in the CPMG.                                                                  %%                                                                                        %%   The function reads the data and recovery times from the specified files and writes   %%   the data, tau_1 and tau_2 and NoiseStd values to specified file.                     %%                                                                                        %%   The Noise std is computed as the standard deviation of the noise in the              %%   imaginary channel (after phase rotation). The data are stored as complex numbers     %%   in Yi-Qiao's format.                                                                 %%                                                                                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                                                        %%	Modified by Y.-Q Song April 2001 to improved the reading of the header.		 %%                                                                                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%DataFileName = 'X2.ser.ar'; DataFileName = input('Input data filename:','s');if isempty(DataFileName)	return;end% echo spacingTe = 0;%Open the file containing the datafid = fopen(DataFileName,'r');if (fid == -1) fprintf(1, 'Error opening file %s. Does it exist ??\n', DataFileName); return; end;%Read the header and get info about echo-spacing, number of wait times and number of echoes%read 1 kB[header, COUNT]  = fread(fid,1024,'uchar');line = setstr(header)';k = findstr(line, 'end_of_header');if(isempty(k))	fprintf(1,'This file is not in Archman format and it will be read as a float binary file.\n');	frewind(fid);	[A,COUNT] = fread(fid,inf,'float32');	fclose(fid);else   	fprintf(1,'This file is in Archman format and the header will be read.\n');	fseek(fid,k+13,'bof');	[A,COUNT] = fread(fid,inf,'float32');        fclose(fid);   	fprintf(1, 'Parsing header ...\n');   % Find number of recovery times	 k = findstr(line, 'al1');	if (~isempty(k) )            N_Tau1 = sscanf(line(k+6:end),'%g', 1); 	 end      % Find number of echoes in CPMG sequence    k = findstr(line,'al2');    if (~isempty(k))  	N_Tau2 = sscanf(line(k+6:end),'%g',1);     end      % Find the echo spacing     k = findstr(line, 'dwell2');    if (~isempty(k))        Te = sscanf(line(k+9:end),'%g',1);    end    % Find vdlist    k = findstr(line, 'time_list =');    if isempty(k) == 0        k1 = findstr(line(k:end),'list size =');        if isempty(k) == 0            td1 = sscanf(line(k+k1+length('list size ='):end),'%d',1);            vdlist = sscanf(line(k+k1+length('list size ='):end),'%g',1+td1);            Tau1_list = vdlist(2:end);        end    endend   clear lineclear vdlistTau_1 = Tau1_list;if (Te == 0)	fprintf(1,'Echo time is not defined. Te=%g\n',Te);	Te = input('Please enter a valid value:');else	fprintf(1,'Echo time Te = %g\n',Te);end% Every second number belongs to the imaginary channelNoise = A(2:2:end);% Alternate numbers from the beginning belong to the real channelA = A(1:2:end);%Compute the number of wait timesNumber_Tau_1 = length(Tau_1);% Compute the number of echoesNumber_Tau_2 = length(A)/Number_Tau_1;if ( (Number_Tau_1 ~= N_Tau1) | (Number_Tau_2 ~= N_Tau2))   fprintf(1, 'Error in number of Tau1s \n');   fprintf(1, 'Make sure that you have the right set of files\n');else   Tau_2 = [Te : Te : Number_Tau_2 * Te]';   %Write data from array A into data matrix.   clear Data  % for i  = 1:Number_Tau_1  %    Data(i,:) = A((i-1)*Number_Tau_2 + 1 : i*Number_Tau_2)';  % end   Data = reshape(A,Number_Tau_2,Number_Tau_1);   %Data = Data';      Noise = reshape(Noise, Number_Tau_2,Number_Tau_1);   %Noise = Noise';         % even echoes   if 0    Data = Data(2:2:end,:);    Tau_2 = Tau_2(2:2:end);    Number_Tau_2 = Number_Tau_2/2;        Noise = Noise(2:2:end,:);        fprintf(1,'only use even echoes.\n');   end      % remove the first point   if 0    Data = Data(2:end,:);    Noise = Noise(2:end,:);    Tau_2 = Tau_2(2:end);    fprintf(1,'remove the first point.\n');   end         NoiseStd = mean(std(Noise(:,floor(size(Noise,2)/2):end),2));         figure   mesh(Tau_1, Tau_2, Data);   xlabel('Tau_1')   ylabel('Tau_2')   zlabel('Data')   figure   mesh(Tau_1, Tau_2, Noise);   xlabel('Tau_1')   ylabel('Tau_2')   zlabel('Imaginary') 	WriteFileName = strcat(DataFileName,'.mat');   save( WriteFileName,'Data','Tau_1','Tau_2','NoiseStd','Noise');      fprintf(1, 'Data saved in file %s \n', WriteFileName);end