% EPG_DERIVATIVES Derivatives of the Extended Phase Graph (EPG) signal.
%   [Jr Ja] = EPG_DERIVATIVES(N,TAU,R1,R2,ALPHA) calculate the derivatives
%   of the EPG signal with respect to rate (Jr) and flip angle (Ja). The
%   signal is from a CPMG sequence with N echoes and echo spacing of 
%   (2*TAU). The parameters are R1=1/T1 (scalar) and R2=1./T2 (scalar or 
%   vector) and ALPHA the flip angle. The matrices Jr and Ja contains one 
%   column for each element in R2.
%
% The following implementation uses sparse matrices for efficient
% compuation.
%
% Author: Kelvin Layton (klayton@unimelb.edu.au)
% Date: June 2012
%
function [ Jr, Jd, Ja ] = epg_diff_derivatives( n, tau, R1, R2vec, alpha, D, G )

nRates = length(R2vec);
tau=tau/2;

Jr = zeros(n,nRates);
Ja = zeros(n,nRates);
Jd = zeros(n,nRates);

% RF mixing matrix, T0
T0 = [cos(alpha/2)^2, sin(alpha/2)^2, sin(alpha); ...
    sin(alpha/2)^2, cos(alpha/2)^2, -sin(alpha); ...
    -0.5*sin(alpha), 0.5*sin(alpha), cos(alpha)];

% Derivative of T0 with respect to alpha
T0d = [-0.5*sin(alpha), 0.5*sin(alpha), cos(alpha); ...
    0.5*sin(alpha), -0.5*sin(alpha), -cos(alpha); ...
    -0.5*cos(alpha), 0.5*cos(alpha), -sin(alpha)];

% RF Mixing Matrix, 90 pulse
T1 =  [cos(alpha/4)^2, sin(alpha/4)^2, sin(alpha/2); ...
    sin(alpha/4)^2, cos(alpha/4)^2, -sin(alpha/2); ...
    -0.5*sin(alpha/2), 0.5*sin(alpha/2), cos(alpha/2)];

% Derivative of T1 with respect to alpha
T1d = [-0.25*sin(alpha), 0.25*sin(alpha), 0.5*cos(alpha); ...
    0.25*sin(alpha), -0.25*sin(alpha), -0.5*cos(alpha); ...
    -0.25*cos(alpha), 0.25*cos(alpha), -0.5*sin(alpha)];


% Build mixing matrix for all states
TArray = cell(1,n);
TArray(:) = {sparse(T0)};
T1Array = cell(1,2);
T1Array(:) = {sparse(T1)};
T = blkdiag(1,T1Array{:},TArray{:});

% Deriv. Matrices
TdArray(:) = {sparse(T0d)};
Td1Array(:) = {sparse(T1d)};
Td = blkdiag(0,Td1Array{:},TdArray{:});
    
% Selection matrix to move all traverse states up one coherence level
%
S = sparse(3*n+1,3*n+1);
S(1,3)=1;
S(2,1)=1;
S(3,6)=1;
S(4,4)=1;
for o=2:n+2
    offset1=( (o-1) - 1)*3 + 2;
    offset2=( (o+1) - 1)*3 + 3;
    if offset1<=(3*n+1)
    S(3*o-1,offset1)=1;  % F_k <- F_{k-1}
    end
    if offset2<=(3*n+1)
    S(3*o,offset2)=1;  % F_-k <- F_{-k-1}
    end
    S(3*o+1,3*o+1)=1;  %Z_order
end

% Loop over different relaxation rates
%
for iRate=1:nRates

    % Relaxation matrix
    R2 = R2vec(iRate);
    R0 = diag([exp(-tau*R2),exp(-tau*R2),exp(-tau*R1)]);
    Rdelta = diag([exp(-delta*R2),exp(-delta*R2),exp(-delta*R1)]); %relaxation during delta, DELTA periods
    RDELTA = diag([exp(-DELTA*R2),exp(-DELTA*R2),exp(-DELTA*R1)]);
    
    % Derivatives of Relaxation Matrices w.r.t. R2
    R0d = diag(-tau*exp(-tau*R2)*[1 1 0]);  % derivative w.r.t R2
    Rdeltad = diag(-delta*exp(-delta*R2)*[1 1 0]);
    RDELTAd = diag(-DELTA*exp(-DELTA*R2)*[1 1 0]);

    % Build relaxation matrix (and derivates) for all states
    RArray = cell(1,n);
    RArray(:) = {sparse(R0)};
    R = blkdiag(exp(-delta*R2),RDELTA,Rdelta,RArray{:}); %added exp(-delta...) and RDELTA, Rdelta to accommodate pulse seq
    
    % Deriv. Matrix
    RArray(:) = {sparse(R0d)};
%    Rd = blkdiag(-tau*exp(-tau*R2),RArray{:});
    Rd = blkdiag(-delta*exp(-delta*R2), RDELTAd, Rdeltad, RArray{:});

    % Diffusion matrix
    gamma = 2.675222e8;	% Gamma, Rad/s/T.
    k = gamma*G*tau; %k-space traversal in time period tau (tE/2)
    kdelta = gamma*G*delta; %pulse seq mod
    kDELTA = gamma*G*DELTA; %pulse seq mod
    
    % Transverse and Longitudinal relaxation.... stuff
    bTDELTA         = ((1-1)*kDELTA+kDELTA/2)^2*DELTA+kDELTA^2/12*DELTA; 
    bLDELTA         = ((1-1)*kDELTA)^2*DELTA; 
    DArrayDELTA{:}  = sparse(diag([exp(-D*bTDELTA),exp(-D*bTDELTA),exp(-D*bLDELTA)]));
    DArrayDELTAd{:} = sparse(diag([-D*exp(-D*bT),-D*exp(-D*bT),-D*exp(-D*bL)]));

% Need to look up more about how to use bT, bL and diffusion for EPG matrix
% calculations. See Weigel.

%    DArrayDELTA{:}  = sparse(diag([1,1,1]));
    
    bTdelta         = ((2-1)*kdelta+kdelta/2)^2*delta+kdelta^2/12*delta; 
    bLdelta         = ((2-1)*kdelta)^2*delta; 
    DArraydelta{:}  = sparse(diag([exp(-D*bTdelta),exp(-D*bTdelta),exp(-D*bLdelta)]));

    DArray = cell(1,n);
    DArrayd = cell(1,n);
    for i = 1:n
        bT = ((i-1)*k+k/2)^2*tau+k^2/12*tau; 
        bL = ((i-1)*k)^2*tau;
        DArray{i} = sparse(diag([exp(-D*bT),exp(-D*bT),exp(-D*bL)]));
        DArrayd{i} = sparse(diag([-D*exp(-D*bT),-D*exp(-D*bT),-D*exp(-D*bL)]));
    end
    
    DDELTA = 
    D2 = blkdiag(1,DArray{:});
    D2d = blkdiag(0,DArrayd{:});
    
    
    % Precession and relaxation matrix (and derivative)
    P = (R*D2*S);
    PdR = (Rd*D2*S);
    PdD = (R*D2d*S);

    % Matrix representing the inter-echo duration
    E = P*T*P;
    EdR0 = PdR*T*P + P*T*PdR;
    EdR=EdR0;
    EdA0 = P*Td*P;
    EdA=EdA0;
    EdD0 = PdD*T*P + P*T*PdD;
    EdD = EdD0;

    % Vector of all states
    x = zeros(size(R,1),1);
    x(1)=1;
    
    % Deriviatives of state vector
    xdashR = EdR*x;
    xdashA = EdA*x;
    xdashD = EdD*x;
    
    % First echo
    x = E*x;
    Jr(1,iRate) = xdashR(1);
    Ja(1,iRate) = xdashA(1);
    Jd(1,iRate) = xdashD(1);

    % Subsequent echoes
    for i=2:n
        % Calculate derivatives using the product rule
        xdashR = EdR0*x + E*xdashR;
        xdashA = EdA0*x + E*xdashA;
        xdashD = EdD0*x + E*xdashD;
        
        Jr(i,iRate) = xdashR(1);
        Ja(i,iRate) = xdashA(1);
        Jd(i,iRate) = xdashD(1);
        
        % Calculate new state for next interation
        x=E*x;

    end

end

